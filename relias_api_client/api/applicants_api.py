# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from relias_api_client.api_client import ApiClient


class ApplicantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def convert_to_learner(self, username, request, **kwargs):  # noqa: E501
        """Converts an applicant based on the username provided to a learner with the new username supplied  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_to_learner(username, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username of the applicant to convert to a learner. (required)
        :param ConvertToLearnerRequest request: The applicant's new username. (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.convert_to_learner_with_http_info(username, request, **kwargs)  # noqa: E501
        else:
            (data) = self.convert_to_learner_with_http_info(username, request, **kwargs)  # noqa: E501
            return data

    def convert_to_learner_with_http_info(self, username, request, **kwargs):  # noqa: E501
        """Converts an applicant based on the username provided to a learner with the new username supplied  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_to_learner_with_http_info(username, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username of the applicant to convert to a learner. (required)
        :param ConvertToLearnerRequest request: The applicant's new username. (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'request', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_to_learner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `convert_to_learner`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `convert_to_learner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicants/{username}/convert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_applicant(self, applicant_information, **kwargs):  # noqa: E501
        """Creates an applicant with the supplied information  # noqa: E501

        Notes:  <ul><li>Org ID is required and should be the ID of your organization.</li><li>First name is required and must not exceed 50 characters.</li><li>Last name is required and must not exceed 50 characters.</li><li>Email is required and will become the username.</li><li>Email must be unique within your organization and not exceed 150 characters.</li><li>Temporary password will be emailed to applicant.</li><li>Job Titles are optional.</li><li>Tracking ID, optional, must be unique within your organization and not exceed 50 characters.          Used to link to an applicant in an external system.      </li><li>GUID, optional, must be unique within your organization and not exceed 50 characters.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_applicant(applicant_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateApplicantRequest applicant_information: the information of the applicant (required)
        :return: CreateApplicantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_applicant_with_http_info(applicant_information, **kwargs)  # noqa: E501
        else:
            (data) = self.create_applicant_with_http_info(applicant_information, **kwargs)  # noqa: E501
            return data

    def create_applicant_with_http_info(self, applicant_information, **kwargs):  # noqa: E501
        """Creates an applicant with the supplied information  # noqa: E501

        Notes:  <ul><li>Org ID is required and should be the ID of your organization.</li><li>First name is required and must not exceed 50 characters.</li><li>Last name is required and must not exceed 50 characters.</li><li>Email is required and will become the username.</li><li>Email must be unique within your organization and not exceed 150 characters.</li><li>Temporary password will be emailed to applicant.</li><li>Job Titles are optional.</li><li>Tracking ID, optional, must be unique within your organization and not exceed 50 characters.          Used to link to an applicant in an external system.      </li><li>GUID, optional, must be unique within your organization and not exceed 50 characters.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_applicant_with_http_info(applicant_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateApplicantRequest applicant_information: the information of the applicant (required)
        :return: CreateApplicantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicant_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicant_information' is set
        if self.api_client.client_side_validation and ('applicant_information' not in params or
                                                       params['applicant_information'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicant_information` when calling `create_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'applicant_information' in params:
            body_params = params['applicant_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateApplicantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_applicant(self, username, **kwargs):  # noqa: E501
        """Retrieves an applicant based on the username provided  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applicant(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the applicant (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: GetApplicantModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_applicant_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_applicant_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_applicant_with_http_info(self, username, **kwargs):  # noqa: E501
        """Retrieves an applicant based on the username provided  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applicant_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the applicant (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: GetApplicantModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicants/{username}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApplicantModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_applicant(self, username, request, **kwargs):  # noqa: E501
        """Update an applicant using JSON patch documents.  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  Provide a set of one or more JSON patch documents describing the changes to apply to the applicant.  See http://jsonpatch.com/ and below for examples.  <br />  Fields that can be updated include:  <ul><li>First name          <pre>{\"op\": \"replace\", \"path\": \"/FirstName\", \"value\": \"new name\"}</pre></li><br /><li>Last name          <pre>{\"op\": \"replace\", \"path\": \"/LastName\", \"value\": \"new name\"}</pre></li><br /><li>Email (will also change the applicant's login)          <pre>{\"op\": \"replace\", \"path\": \"/Email\", \"value\": \"new@email.com\"}</pre></li><br /><li>Job titles          <pre>{\"op\": \"replace\", \"path\": \"/JobTitles\", \"value\": [\"Job title 1\", \"Job title 2\"]}</pre></li><br /><li>Tracking ID          <pre>{\"op\": \"replace\", \"path\": \"/TrackingId\", \"value\": \"new tracking ID\"}</pre></li><br /><li>GUID          <pre>{\"op\": \"replace\", \"path\": \"/Guid\", \"value\": \"new GUID\"}</pre></li><br /><li>User status          <pre>{\"op\": \"replace\", \"path\": \"/UserStatus\", \"value\": \"Inactive\"}</pre>          Options:          <ul><li>Active</li><li>Inactive</li></ul></li></ul><p>  Note that the <b>path</b> parameter is case sensitive.  <br /><br />  Example: Changing an applicant's first name, last name and user status  </p><pre>  [      {\"op\": \"replace\", \"path\": \"/FirstName\", \"value\": \"new first name\"},      {\"op\": \"replace\", \"path\": \"/LastName\", \"value\": \"new last name\"},      {\"op\": \"replace\", \"path\": \"/UserStatus\", \"value\": \"Inactive\"}  ]  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_applicant(username, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username of the applicant to update. (required)
        :param list[Operation] request: An array of JSON patch documents. (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_applicant_with_http_info(username, request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_applicant_with_http_info(username, request, **kwargs)  # noqa: E501
            return data

    def update_applicant_with_http_info(self, username, request, **kwargs):  # noqa: E501
        """Update an applicant using JSON patch documents.  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  Provide a set of one or more JSON patch documents describing the changes to apply to the applicant.  See http://jsonpatch.com/ and below for examples.  <br />  Fields that can be updated include:  <ul><li>First name          <pre>{\"op\": \"replace\", \"path\": \"/FirstName\", \"value\": \"new name\"}</pre></li><br /><li>Last name          <pre>{\"op\": \"replace\", \"path\": \"/LastName\", \"value\": \"new name\"}</pre></li><br /><li>Email (will also change the applicant's login)          <pre>{\"op\": \"replace\", \"path\": \"/Email\", \"value\": \"new@email.com\"}</pre></li><br /><li>Job titles          <pre>{\"op\": \"replace\", \"path\": \"/JobTitles\", \"value\": [\"Job title 1\", \"Job title 2\"]}</pre></li><br /><li>Tracking ID          <pre>{\"op\": \"replace\", \"path\": \"/TrackingId\", \"value\": \"new tracking ID\"}</pre></li><br /><li>GUID          <pre>{\"op\": \"replace\", \"path\": \"/Guid\", \"value\": \"new GUID\"}</pre></li><br /><li>User status          <pre>{\"op\": \"replace\", \"path\": \"/UserStatus\", \"value\": \"Inactive\"}</pre>          Options:          <ul><li>Active</li><li>Inactive</li></ul></li></ul><p>  Note that the <b>path</b> parameter is case sensitive.  <br /><br />  Example: Changing an applicant's first name, last name and user status  </p><pre>  [      {\"op\": \"replace\", \"path\": \"/FirstName\", \"value\": \"new first name\"},      {\"op\": \"replace\", \"path\": \"/LastName\", \"value\": \"new last name\"},      {\"op\": \"replace\", \"path\": \"/UserStatus\", \"value\": \"Inactive\"}  ]  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_applicant_with_http_info(username, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username of the applicant to update. (required)
        :param list[Operation] request: An array of JSON patch documents. (required)
        :param int org_id: organization ID of the applicant (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'request', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `update_applicant`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `update_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicants/{username}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
