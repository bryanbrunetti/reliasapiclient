# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from relias_api_client.api_client import ApiClient


class AssignmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_assignments_for_user(self, username, assignment_request, **kwargs):  # noqa: E501
        """Assigns multiple assessments to one user  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters. <br />  Notes:                Create Assignment Request:  <ul><li>AssessmentIds is a required list of Assessment IDs to create assignments. The Organization should have access to all of them.</li><li>Expiration is required for the assignments. The time will be set to 23:59 UTC of the date provided.</li><li>Availability is the date and time in UTC the assignments will be available to the user. This is optional and will default to the current date.</li><li>Locked, if true, indicates that the user cannot take the assignment until it is manually unlocked. This is optional; however, Availability should not be provided when Locked is true.</li></ul>                Create Assignment Response:  <ul><li>AssignmentId is the ID for the Assignment.</li><li>UserId is the ID of the User in the Assignment.</li><li>Expiration is the expiration date for the Assignment.</li><li>AssessmentId is the ID of the assigned Assessment.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignments_for_user(username, assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user to assign the Assessment (required)
        :param CreateAssignmentRequest assignment_request: The assignment information (required)
        :param int org_id: Organization ID of the user (defaults to current organization ID)
        :return: list[CreateAssignmentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assignments_for_user_with_http_info(username, assignment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assignments_for_user_with_http_info(username, assignment_request, **kwargs)  # noqa: E501
            return data

    def create_assignments_for_user_with_http_info(self, username, assignment_request, **kwargs):  # noqa: E501
        """Assigns multiple assessments to one user  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters. <br />  Notes:                Create Assignment Request:  <ul><li>AssessmentIds is a required list of Assessment IDs to create assignments. The Organization should have access to all of them.</li><li>Expiration is required for the assignments. The time will be set to 23:59 UTC of the date provided.</li><li>Availability is the date and time in UTC the assignments will be available to the user. This is optional and will default to the current date.</li><li>Locked, if true, indicates that the user cannot take the assignment until it is manually unlocked. This is optional; however, Availability should not be provided when Locked is true.</li></ul>                Create Assignment Response:  <ul><li>AssignmentId is the ID for the Assignment.</li><li>UserId is the ID of the User in the Assignment.</li><li>Expiration is the expiration date for the Assignment.</li><li>AssessmentId is the ID of the assigned Assessment.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignments_for_user_with_http_info(username, assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user to assign the Assessment (required)
        :param CreateAssignmentRequest assignment_request: The assignment information (required)
        :param int org_id: Organization ID of the user (defaults to current organization ID)
        :return: list[CreateAssignmentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_request', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignments_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `create_assignments_for_user`")  # noqa: E501
        # verify the required parameter 'assignment_request' is set
        if self.api_client.client_side_validation and ('assignment_request' not in params or
                                                       params['assignment_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_request` when calling `create_assignments_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment_request' in params:
            body_params = params['assignment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CreateAssignmentResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_assignments(self, username, **kwargs):  # noqa: E501
        """Retrieves a paginated list of assignments for the provided username  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_assignments(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignments are wanted (required)
        :param int page_number:
        :param int page_size:
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: PaginatedListOfAssignmentModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_assignments_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_assignments_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_assignments_with_http_info(self, username, **kwargs):  # noqa: E501
        """Retrieves a paginated list of assignments for the provided username  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_assignments_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignments are wanted (required)
        :param int page_number:
        :param int page_size:
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: PaginatedListOfAssignmentModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'page_number', 'page_size', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_user_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedListOfAssignmentModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_behavioral_assignment(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves behavioral assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_behavioral_assignment(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param str job_category: the title of the job category used to measure job fit. * Not applicable to the \"Attitude Only\" behavioral assessment.                Possible values are:  <ul><li>Allied Health</li><li>Clinical Educator</li><li>Executive</li><li>Manager / Supervisor</li><li>Non-Clinical Non-Patient-Facing</li><li>Non-Clinical Patient-Facing</li><li>Nursing Assistant</li><li>Registered Nurse</li><li>Registered Nurse - ER</li><li>Registered Nurse - ICU</li><li>Registered Nurse - Labor &amp; Delivery</li><li>Registered Nurse - Medical Surgical</li><li>Registered Nurse - NICU</li></ul>
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: BehavioralResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_behavioral_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_behavioral_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_behavioral_assignment_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves behavioral assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_behavioral_assignment_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param str job_category: the title of the job category used to measure job fit. * Not applicable to the \"Attitude Only\" behavioral assessment.                Possible values are:  <ul><li>Allied Health</li><li>Clinical Educator</li><li>Executive</li><li>Manager / Supervisor</li><li>Non-Clinical Non-Patient-Facing</li><li>Non-Clinical Patient-Facing</li><li>Nursing Assistant</li><li>Registered Nurse</li><li>Registered Nurse - ER</li><li>Registered Nurse - ICU</li><li>Registered Nurse - Labor &amp; Delivery</li><li>Registered Nurse - Medical Surgical</li><li>Registered Nurse - NICU</li></ul>
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: BehavioralResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'job_category', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_behavioral_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_behavioral_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_behavioral_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'job_category' in params:
            query_params.append(('jobCategory', params['job_category']))  # noqa: E501
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/behavioral-assignments/{assignmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BehavioralResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_behavioral_assignment_result_pdf(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a behavioral assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_behavioral_assignment_result_pdf(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param str job_category: the title of the job category used to measure job fit. * Not applicable to the \"Attitude Only\" behavioral assessment.                Possible values are:  <ul><li>Allied Health</li><li>Clinical Educator</li><li>Executive</li><li>Manager / Supervisor</li><li>Non-Clinical Non-Patient-Facing</li><li>Non-Clinical Patient-Facing</li><li>Nursing Assistant</li><li>Registered Nurse</li><li>Registered Nurse - ER</li><li>Registered Nurse - ICU</li><li>Registered Nurse - Labor &amp; Delivery</li><li>Registered Nurse - Medical Surgical</li><li>Registered Nurse - NICU</li></ul>
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_behavioral_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_behavioral_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_behavioral_assignment_result_pdf_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a behavioral assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_behavioral_assignment_result_pdf_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param str job_category: the title of the job category used to measure job fit. * Not applicable to the \"Attitude Only\" behavioral assessment.                Possible values are:  <ul><li>Allied Health</li><li>Clinical Educator</li><li>Executive</li><li>Manager / Supervisor</li><li>Non-Clinical Non-Patient-Facing</li><li>Non-Clinical Patient-Facing</li><li>Nursing Assistant</li><li>Registered Nurse</li><li>Registered Nurse - ER</li><li>Registered Nurse - ICU</li><li>Registered Nurse - Labor &amp; Delivery</li><li>Registered Nurse - Medical Surgical</li><li>Registered Nurse - NICU</li></ul>
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'job_category', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_behavioral_assignment_result_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_behavioral_assignment_result_pdf`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_behavioral_assignment_result_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'job_category' in params:
            query_params.append(('jobCategory', params['job_category']))  # noqa: E501
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/behavioral-assignments/{assignmentId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileStreamResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_clinical_assignment(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves clinical assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_clinical_assignment(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: ClinicalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_clinical_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_clinical_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_clinical_assignment_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves clinical assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_clinical_assignment_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: ClinicalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_clinical_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_clinical_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_clinical_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/clinical-assignments/{assignmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClinicalResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_clinical_assignment_result_pdf(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a clinical assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  <br />   A results PDF is generated automatically when an assignment is completed. If this endpoint is called before the PDF has finished generating, a new one will be generated at that time. If using this endpoint in combination with an Assignment Completed webhook, note that calling this endpoint immediately after receiving that notification will likely require a new PDF to generate, resulting in a slower than usual response time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_clinical_assignment_result_pdf(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_clinical_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_clinical_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_clinical_assignment_result_pdf_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a clinical assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  <br />   A results PDF is generated automatically when an assignment is completed. If this endpoint is called before the PDF has finished generating, a new one will be generated at that time. If using this endpoint in combination with an Assignment Completed webhook, note that calling this endpoint immediately after receiving that notification will likely require a new PDF to generate, resulting in a slower than usual response time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_clinical_assignment_result_pdf_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_clinical_assignment_result_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_clinical_assignment_result_pdf`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_clinical_assignment_result_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/clinical-assignments/{assignmentId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileStreamResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_self_assignment(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves self assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_self_assignment(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: SelfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_self_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_self_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_self_assignment_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves self assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_self_assignment_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: SelfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_self_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_self_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_self_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/self-assignments/{assignmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SelfResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_self_assignment_result_pdf(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a self assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_self_assignment_result_pdf(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_self_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_self_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_self_assignment_result_pdf_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a self assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_self_assignment_result_pdf_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_self_assignment_result_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_self_assignment_result_pdf`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_self_assignment_result_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/self-assignments/{assignmentId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileStreamResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_situational_assignment(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a situational assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_situational_assignment(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: SituationalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_situational_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_situational_assignment_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_situational_assignment_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a situational assignment results for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_situational_assignment_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: SituationalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_situational_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_situational_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_situational_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/situational-assignments/{assignmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SituationalResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_situational_assignment_result_pdf(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a situational assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_situational_assignment_result_pdf(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_situational_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_situational_assignment_result_pdf_with_http_info(username, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_users_situational_assignment_result_pdf_with_http_info(self, username, assignment_id, **kwargs):  # noqa: E501
        """Retrieves a situational assignment results pdf for a provided username and assignment ID  # noqa: E501

        When providing username, be sure to URL encode the value if it contains any special characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_situational_assignment_result_pdf_with_http_info(username, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: the username of the user whose assignment is wanted (required)
        :param int assignment_id: the ID of the assignment (required)
        :param int org_id: organization ID of the user (defaults to current organization ID)
        :return: FileStreamResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'assignment_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_situational_assignment_result_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `get_users_situational_assignment_result_pdf`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_users_situational_assignment_result_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignmentId'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/situational-assignments/{assignmentId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileStreamResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
