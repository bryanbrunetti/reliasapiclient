# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from relias_api_client.api_client import ApiClient


class WebhooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_assignment_completed_webhook(self, **kwargs):  # noqa: E501
        """Creates the Assignment Completed Webhook with the supplied Callback URL and optional authentication information  # noqa: E501

        <p>    <b>Webhook Notes:</b>  </p>  <ul>    <li>Callback URL is required and must not exceed 2048 characters.</li>    <li>Username and Password are optional; however, both must be supplied if chosen.</li>    <li>Username must only contain alphanumeric characters when provided.</li>    <li>Username must not exceed 32 characters when provided.</li>    <li>Password must only contain alphanumeric characters when provided.</li>    <li>Password must not exceed 32 characters when provided.</li>  </ul>  <br />  <p>    <b>Callback URL Notes:</b>  </p>  <ul>    <li>Upon assignment completion, the provided Callback URL of the webhook will be called using a HTTP POST.</li>    <li>The Callback URL chosen will be based on the organization ID of the user who completed the assignment.</li>    <li>If username/password were provided, these will be implemented for the POST using Basic Authentication.</li>    <li>When using Basic Authentication, HTTPS should be used for the Callback URL and any redirect will remove the Authorization Header.</li>    <li>If a failure was to occur when communicating with the Callback URL, the POST will be reattempted up to 5 additional times before discarding the information regarding the assignment completion.</li>  </ul>  <br />  <p>    <b>Request Body for Assignment Completed Callback URL:</b>  </p>  <pre>              {                  \"sentOn\": \"2020-12-25T12:15:10.698154\",                  \"type\": \"assignment-completed\",                  \"webhookId\": 231,                  \"data\": {                      \"assignmentId\": 87,                      \"username\": \"murphy123\",                      \"completed\": \"2020-12-25T12:8:32.735701\",                      \"assessmentName\": \"CCU Exam A v4\",                      \"assessmentType\": \"Clinical\"                  }              }              </pre>  <ul>    <li>SentOn is a timestamp of when the call to the Callback URL is occurring.</li>    <li>Type is the name of the webhook call that is happening; for the Assignment Completed Webhook, this will be \"assignment-completed\".</li>    <li>Webhook ID is the ID of the Webhook that is returned after creation.</li>    <li>Data is information specific to the type of webhook call that is occurring. In this scenario, the Assignment Completed Webhook returns a subset of assignment related information that may be used at other endpoints to retrieve more.</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_completed_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAssignmentCompletedWebhookRequest webhook_request: the information for the webhook
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: CreateAssignmentCompletedWebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_assignment_completed_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """Creates the Assignment Completed Webhook with the supplied Callback URL and optional authentication information  # noqa: E501

        <p>    <b>Webhook Notes:</b>  </p>  <ul>    <li>Callback URL is required and must not exceed 2048 characters.</li>    <li>Username and Password are optional; however, both must be supplied if chosen.</li>    <li>Username must only contain alphanumeric characters when provided.</li>    <li>Username must not exceed 32 characters when provided.</li>    <li>Password must only contain alphanumeric characters when provided.</li>    <li>Password must not exceed 32 characters when provided.</li>  </ul>  <br />  <p>    <b>Callback URL Notes:</b>  </p>  <ul>    <li>Upon assignment completion, the provided Callback URL of the webhook will be called using a HTTP POST.</li>    <li>The Callback URL chosen will be based on the organization ID of the user who completed the assignment.</li>    <li>If username/password were provided, these will be implemented for the POST using Basic Authentication.</li>    <li>When using Basic Authentication, HTTPS should be used for the Callback URL and any redirect will remove the Authorization Header.</li>    <li>If a failure was to occur when communicating with the Callback URL, the POST will be reattempted up to 5 additional times before discarding the information regarding the assignment completion.</li>  </ul>  <br />  <p>    <b>Request Body for Assignment Completed Callback URL:</b>  </p>  <pre>              {                  \"sentOn\": \"2020-12-25T12:15:10.698154\",                  \"type\": \"assignment-completed\",                  \"webhookId\": 231,                  \"data\": {                      \"assignmentId\": 87,                      \"username\": \"murphy123\",                      \"completed\": \"2020-12-25T12:8:32.735701\",                      \"assessmentName\": \"CCU Exam A v4\",                      \"assessmentType\": \"Clinical\"                  }              }              </pre>  <ul>    <li>SentOn is a timestamp of when the call to the Callback URL is occurring.</li>    <li>Type is the name of the webhook call that is happening; for the Assignment Completed Webhook, this will be \"assignment-completed\".</li>    <li>Webhook ID is the ID of the Webhook that is returned after creation.</li>    <li>Data is information specific to the type of webhook call that is occurring. In this scenario, the Assignment Completed Webhook returns a subset of assignment related information that may be used at other endpoints to retrieve more.</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_completed_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAssignmentCompletedWebhookRequest webhook_request: the information for the webhook
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: CreateAssignmentCompletedWebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_request', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignment_completed_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'webhook_request' in params:
            body_params = params['webhook_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/webhooks/assignment-completed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAssignmentCompletedWebhookResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assignment_completed_webhook(self, **kwargs):  # noqa: E501
        """Deletes the Assignment Completed Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment_completed_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_assignment_completed_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the Assignment Completed Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment_completed_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assignment_completed_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/webhooks/assignment-completed', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assignment_completed_webhook(self, **kwargs):  # noqa: E501
        """Retrieves the Assignment Completed Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assignment_completed_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: GetAssignmentCompletedWebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_assignment_completed_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the Assignment Completed Webhook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assignment_completed_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: GetAssignmentCompletedWebhookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assignment_completed_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/webhooks/assignment-completed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAssignmentCompletedWebhookResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_assignment_completed_webhook(self, **kwargs):  # noqa: E501
        """Updates the Assignment Completed Webhook  # noqa: E501

        <p>    <b>Webhook Notes:</b>  </p>  <ul>    <li>Callback URL is required and must not exceed 2048 characters.</li>    <li>Username and Password are optional; however, both must be supplied if chosen.</li>    <li>Username must not exceed 32 characters when provided.</li>    <li>Password must not exceed 64 characters when provided.</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assignment_completed_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAssignmentCompletedWebhookRequest webhook_request: the information for the webhook
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_assignment_completed_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_assignment_completed_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the Assignment Completed Webhook  # noqa: E501

        <p>    <b>Webhook Notes:</b>  </p>  <ul>    <li>Callback URL is required and must not exceed 2048 characters.</li>    <li>Username and Password are optional; however, both must be supplied if chosen.</li>    <li>Username must not exceed 32 characters when provided.</li>    <li>Password must not exceed 64 characters when provided.</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assignment_completed_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAssignmentCompletedWebhookRequest webhook_request: the information for the webhook
        :param int org_id: organization ID for the webhook (defaults to current organization ID)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_request', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assignment_completed_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'webhook_request' in params:
            body_params = params['webhook_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/webhooks/assignment-completed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
