# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from relias_api_client.configuration import Configuration


class AssignmentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_id': 'int',
        'assessment': 'AssignmentAssessmentModel',
        'expiration': 'datetime',
        'completed': 'datetime',
        'last_accessed': 'datetime',
        'grade': 'float',
        'band': 'str'
    }

    attribute_map = {
        'assignment_id': 'assignmentId',
        'assessment': 'assessment',
        'expiration': 'expiration',
        'completed': 'completed',
        'last_accessed': 'lastAccessed',
        'grade': 'grade',
        'band': 'band'
    }

    def __init__(self, assignment_id=None, assessment=None, expiration=None, completed=None, last_accessed=None, grade=None, band=None, _configuration=None):  # noqa: E501
        """AssignmentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_id = None
        self._assessment = None
        self._expiration = None
        self._completed = None
        self._last_accessed = None
        self._grade = None
        self._band = None
        self.discriminator = None

        if assignment_id is not None:
            self.assignment_id = assignment_id
        if assessment is not None:
            self.assessment = assessment
        if expiration is not None:
            self.expiration = expiration
        if completed is not None:
            self.completed = completed
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if grade is not None:
            self.grade = grade
        if band is not None:
            self.band = band

    @property
    def assignment_id(self):
        """Gets the assignment_id of this AssignmentModel.  # noqa: E501


        :return: The assignment_id of this AssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this AssignmentModel.


        :param assignment_id: The assignment_id of this AssignmentModel.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def assessment(self):
        """Gets the assessment of this AssignmentModel.  # noqa: E501


        :return: The assessment of this AssignmentModel.  # noqa: E501
        :rtype: AssignmentAssessmentModel
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment):
        """Sets the assessment of this AssignmentModel.


        :param assessment: The assessment of this AssignmentModel.  # noqa: E501
        :type: AssignmentAssessmentModel
        """

        self._assessment = assessment

    @property
    def expiration(self):
        """Gets the expiration of this AssignmentModel.  # noqa: E501


        :return: The expiration of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this AssignmentModel.


        :param expiration: The expiration of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def completed(self):
        """Gets the completed of this AssignmentModel.  # noqa: E501


        :return: The completed of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this AssignmentModel.


        :param completed: The completed of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._completed = completed

    @property
    def last_accessed(self):
        """Gets the last_accessed of this AssignmentModel.  # noqa: E501


        :return: The last_accessed of this AssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this AssignmentModel.


        :param last_accessed: The last_accessed of this AssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._last_accessed = last_accessed

    @property
    def grade(self):
        """Gets the grade of this AssignmentModel.  # noqa: E501


        :return: The grade of this AssignmentModel.  # noqa: E501
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AssignmentModel.


        :param grade: The grade of this AssignmentModel.  # noqa: E501
        :type: float
        """

        self._grade = grade

    @property
    def band(self):
        """Gets the band of this AssignmentModel.  # noqa: E501


        :return: The band of this AssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this AssignmentModel.


        :param band: The band of this AssignmentModel.  # noqa: E501
        :type: str
        """

        self._band = band

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentModel):
            return True

        return self.to_dict() != other.to_dict()
