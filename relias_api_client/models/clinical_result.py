# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from relias_api_client.configuration import Configuration


class ClinicalResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'score': 'int',
        'time_spent': 'int',
        'total_correct': 'float',
        'total_questions': 'float',
        'angoff_score': 'int',
        'completion_date': 'datetime',
        'assessment_id': 'int',
        'assessment_name': 'str',
        'results_url': 'str'
    }

    attribute_map = {
        'score': 'score',
        'time_spent': 'timeSpent',
        'total_correct': 'totalCorrect',
        'total_questions': 'totalQuestions',
        'angoff_score': 'angoffScore',
        'completion_date': 'completionDate',
        'assessment_id': 'assessmentId',
        'assessment_name': 'assessmentName',
        'results_url': 'resultsUrl'
    }

    def __init__(self, score=None, time_spent=None, total_correct=None, total_questions=None, angoff_score=None, completion_date=None, assessment_id=None, assessment_name=None, results_url=None, _configuration=None):  # noqa: E501
        """ClinicalResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._score = None
        self._time_spent = None
        self._total_correct = None
        self._total_questions = None
        self._angoff_score = None
        self._completion_date = None
        self._assessment_id = None
        self._assessment_name = None
        self._results_url = None
        self.discriminator = None

        if score is not None:
            self.score = score
        if time_spent is not None:
            self.time_spent = time_spent
        if total_correct is not None:
            self.total_correct = total_correct
        if total_questions is not None:
            self.total_questions = total_questions
        if angoff_score is not None:
            self.angoff_score = angoff_score
        if completion_date is not None:
            self.completion_date = completion_date
        if assessment_id is not None:
            self.assessment_id = assessment_id
        if assessment_name is not None:
            self.assessment_name = assessment_name
        if results_url is not None:
            self.results_url = results_url

    @property
    def score(self):
        """Gets the score of this ClinicalResult.  # noqa: E501


        :return: The score of this ClinicalResult.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ClinicalResult.


        :param score: The score of this ClinicalResult.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def time_spent(self):
        """Gets the time_spent of this ClinicalResult.  # noqa: E501


        :return: The time_spent of this ClinicalResult.  # noqa: E501
        :rtype: int
        """
        return self._time_spent

    @time_spent.setter
    def time_spent(self, time_spent):
        """Sets the time_spent of this ClinicalResult.


        :param time_spent: The time_spent of this ClinicalResult.  # noqa: E501
        :type: int
        """

        self._time_spent = time_spent

    @property
    def total_correct(self):
        """Gets the total_correct of this ClinicalResult.  # noqa: E501


        :return: The total_correct of this ClinicalResult.  # noqa: E501
        :rtype: float
        """
        return self._total_correct

    @total_correct.setter
    def total_correct(self, total_correct):
        """Sets the total_correct of this ClinicalResult.


        :param total_correct: The total_correct of this ClinicalResult.  # noqa: E501
        :type: float
        """

        self._total_correct = total_correct

    @property
    def total_questions(self):
        """Gets the total_questions of this ClinicalResult.  # noqa: E501


        :return: The total_questions of this ClinicalResult.  # noqa: E501
        :rtype: float
        """
        return self._total_questions

    @total_questions.setter
    def total_questions(self, total_questions):
        """Sets the total_questions of this ClinicalResult.


        :param total_questions: The total_questions of this ClinicalResult.  # noqa: E501
        :type: float
        """

        self._total_questions = total_questions

    @property
    def angoff_score(self):
        """Gets the angoff_score of this ClinicalResult.  # noqa: E501


        :return: The angoff_score of this ClinicalResult.  # noqa: E501
        :rtype: int
        """
        return self._angoff_score

    @angoff_score.setter
    def angoff_score(self, angoff_score):
        """Sets the angoff_score of this ClinicalResult.


        :param angoff_score: The angoff_score of this ClinicalResult.  # noqa: E501
        :type: int
        """

        self._angoff_score = angoff_score

    @property
    def completion_date(self):
        """Gets the completion_date of this ClinicalResult.  # noqa: E501


        :return: The completion_date of this ClinicalResult.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ClinicalResult.


        :param completion_date: The completion_date of this ClinicalResult.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def assessment_id(self):
        """Gets the assessment_id of this ClinicalResult.  # noqa: E501


        :return: The assessment_id of this ClinicalResult.  # noqa: E501
        :rtype: int
        """
        return self._assessment_id

    @assessment_id.setter
    def assessment_id(self, assessment_id):
        """Sets the assessment_id of this ClinicalResult.


        :param assessment_id: The assessment_id of this ClinicalResult.  # noqa: E501
        :type: int
        """

        self._assessment_id = assessment_id

    @property
    def assessment_name(self):
        """Gets the assessment_name of this ClinicalResult.  # noqa: E501


        :return: The assessment_name of this ClinicalResult.  # noqa: E501
        :rtype: str
        """
        return self._assessment_name

    @assessment_name.setter
    def assessment_name(self, assessment_name):
        """Sets the assessment_name of this ClinicalResult.


        :param assessment_name: The assessment_name of this ClinicalResult.  # noqa: E501
        :type: str
        """

        self._assessment_name = assessment_name

    @property
    def results_url(self):
        """Gets the results_url of this ClinicalResult.  # noqa: E501


        :return: The results_url of this ClinicalResult.  # noqa: E501
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this ClinicalResult.


        :param results_url: The results_url of this ClinicalResult.  # noqa: E501
        :type: str
        """

        self._results_url = results_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClinicalResult):
            return True

        return self.to_dict() != other.to_dict()
