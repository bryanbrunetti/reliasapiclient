# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from relias_api_client.configuration import Configuration


class CreateAssignmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assessment_ids': 'list[int]',
        'expiration': 'datetime',
        'availability': 'datetime',
        'locked': 'bool'
    }

    attribute_map = {
        'assessment_ids': 'assessmentIds',
        'expiration': 'expiration',
        'availability': 'availability',
        'locked': 'locked'
    }

    def __init__(self, assessment_ids=None, expiration=None, availability=None, locked=None, _configuration=None):  # noqa: E501
        """CreateAssignmentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assessment_ids = None
        self._expiration = None
        self._availability = None
        self._locked = None
        self.discriminator = None

        if assessment_ids is not None:
            self.assessment_ids = assessment_ids
        if expiration is not None:
            self.expiration = expiration
        if availability is not None:
            self.availability = availability
        if locked is not None:
            self.locked = locked

    @property
    def assessment_ids(self):
        """Gets the assessment_ids of this CreateAssignmentRequest.  # noqa: E501


        :return: The assessment_ids of this CreateAssignmentRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._assessment_ids

    @assessment_ids.setter
    def assessment_ids(self, assessment_ids):
        """Sets the assessment_ids of this CreateAssignmentRequest.


        :param assessment_ids: The assessment_ids of this CreateAssignmentRequest.  # noqa: E501
        :type: list[int]
        """

        self._assessment_ids = assessment_ids

    @property
    def expiration(self):
        """Gets the expiration of this CreateAssignmentRequest.  # noqa: E501


        :return: The expiration of this CreateAssignmentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CreateAssignmentRequest.


        :param expiration: The expiration of this CreateAssignmentRequest.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def availability(self):
        """Gets the availability of this CreateAssignmentRequest.  # noqa: E501


        :return: The availability of this CreateAssignmentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this CreateAssignmentRequest.


        :param availability: The availability of this CreateAssignmentRequest.  # noqa: E501
        :type: datetime
        """

        self._availability = availability

    @property
    def locked(self):
        """Gets the locked of this CreateAssignmentRequest.  # noqa: E501


        :return: The locked of this CreateAssignmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this CreateAssignmentRequest.


        :param locked: The locked of this CreateAssignmentRequest.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAssignmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAssignmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAssignmentRequest):
            return True

        return self.to_dict() != other.to_dict()
