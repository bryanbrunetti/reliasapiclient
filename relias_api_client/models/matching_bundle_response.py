# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from relias_api_client.configuration import Configuration


class MatchingBundleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_id': 'int',
        'title': 'str',
        'description': 'str',
        'matching_profiles': 'list[MatchingProfileResponse]'
    }

    attribute_map = {
        'bundle_id': 'bundleId',
        'title': 'title',
        'description': 'description',
        'matching_profiles': 'matchingProfiles'
    }

    def __init__(self, bundle_id=None, title=None, description=None, matching_profiles=None, _configuration=None):  # noqa: E501
        """MatchingBundleResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bundle_id = None
        self._title = None
        self._description = None
        self._matching_profiles = None
        self.discriminator = None

        if bundle_id is not None:
            self.bundle_id = bundle_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if matching_profiles is not None:
            self.matching_profiles = matching_profiles

    @property
    def bundle_id(self):
        """Gets the bundle_id of this MatchingBundleResponse.  # noqa: E501


        :return: The bundle_id of this MatchingBundleResponse.  # noqa: E501
        :rtype: int
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this MatchingBundleResponse.


        :param bundle_id: The bundle_id of this MatchingBundleResponse.  # noqa: E501
        :type: int
        """

        self._bundle_id = bundle_id

    @property
    def title(self):
        """Gets the title of this MatchingBundleResponse.  # noqa: E501


        :return: The title of this MatchingBundleResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MatchingBundleResponse.


        :param title: The title of this MatchingBundleResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MatchingBundleResponse.  # noqa: E501


        :return: The description of this MatchingBundleResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MatchingBundleResponse.


        :param description: The description of this MatchingBundleResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def matching_profiles(self):
        """Gets the matching_profiles of this MatchingBundleResponse.  # noqa: E501


        :return: The matching_profiles of this MatchingBundleResponse.  # noqa: E501
        :rtype: list[MatchingProfileResponse]
        """
        return self._matching_profiles

    @matching_profiles.setter
    def matching_profiles(self, matching_profiles):
        """Sets the matching_profiles of this MatchingBundleResponse.


        :param matching_profiles: The matching_profiles of this MatchingBundleResponse.  # noqa: E501
        :type: list[MatchingProfileResponse]
        """

        self._matching_profiles = matching_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchingBundleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchingBundleResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchingBundleResponse):
            return True

        return self.to_dict() != other.to_dict()
