# coding: utf-8

"""
    Relias API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from relias_api_client.configuration import Configuration


class SelfResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_competency': 'float',
        'overall_proficiency': 'float',
        'overall_frequency': 'float',
        'completion_date': 'datetime',
        'assessment_id': 'int',
        'assessment_name': 'str',
        'results_url': 'str'
    }

    attribute_map = {
        'overall_competency': 'overallCompetency',
        'overall_proficiency': 'overallProficiency',
        'overall_frequency': 'overallFrequency',
        'completion_date': 'completionDate',
        'assessment_id': 'assessmentId',
        'assessment_name': 'assessmentName',
        'results_url': 'resultsUrl'
    }

    def __init__(self, overall_competency=None, overall_proficiency=None, overall_frequency=None, completion_date=None, assessment_id=None, assessment_name=None, results_url=None, _configuration=None):  # noqa: E501
        """SelfResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._overall_competency = None
        self._overall_proficiency = None
        self._overall_frequency = None
        self._completion_date = None
        self._assessment_id = None
        self._assessment_name = None
        self._results_url = None
        self.discriminator = None

        if overall_competency is not None:
            self.overall_competency = overall_competency
        if overall_proficiency is not None:
            self.overall_proficiency = overall_proficiency
        if overall_frequency is not None:
            self.overall_frequency = overall_frequency
        if completion_date is not None:
            self.completion_date = completion_date
        if assessment_id is not None:
            self.assessment_id = assessment_id
        if assessment_name is not None:
            self.assessment_name = assessment_name
        if results_url is not None:
            self.results_url = results_url

    @property
    def overall_competency(self):
        """Gets the overall_competency of this SelfResult.  # noqa: E501


        :return: The overall_competency of this SelfResult.  # noqa: E501
        :rtype: float
        """
        return self._overall_competency

    @overall_competency.setter
    def overall_competency(self, overall_competency):
        """Sets the overall_competency of this SelfResult.


        :param overall_competency: The overall_competency of this SelfResult.  # noqa: E501
        :type: float
        """

        self._overall_competency = overall_competency

    @property
    def overall_proficiency(self):
        """Gets the overall_proficiency of this SelfResult.  # noqa: E501


        :return: The overall_proficiency of this SelfResult.  # noqa: E501
        :rtype: float
        """
        return self._overall_proficiency

    @overall_proficiency.setter
    def overall_proficiency(self, overall_proficiency):
        """Sets the overall_proficiency of this SelfResult.


        :param overall_proficiency: The overall_proficiency of this SelfResult.  # noqa: E501
        :type: float
        """

        self._overall_proficiency = overall_proficiency

    @property
    def overall_frequency(self):
        """Gets the overall_frequency of this SelfResult.  # noqa: E501


        :return: The overall_frequency of this SelfResult.  # noqa: E501
        :rtype: float
        """
        return self._overall_frequency

    @overall_frequency.setter
    def overall_frequency(self, overall_frequency):
        """Sets the overall_frequency of this SelfResult.


        :param overall_frequency: The overall_frequency of this SelfResult.  # noqa: E501
        :type: float
        """

        self._overall_frequency = overall_frequency

    @property
    def completion_date(self):
        """Gets the completion_date of this SelfResult.  # noqa: E501


        :return: The completion_date of this SelfResult.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this SelfResult.


        :param completion_date: The completion_date of this SelfResult.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def assessment_id(self):
        """Gets the assessment_id of this SelfResult.  # noqa: E501


        :return: The assessment_id of this SelfResult.  # noqa: E501
        :rtype: int
        """
        return self._assessment_id

    @assessment_id.setter
    def assessment_id(self, assessment_id):
        """Sets the assessment_id of this SelfResult.


        :param assessment_id: The assessment_id of this SelfResult.  # noqa: E501
        :type: int
        """

        self._assessment_id = assessment_id

    @property
    def assessment_name(self):
        """Gets the assessment_name of this SelfResult.  # noqa: E501


        :return: The assessment_name of this SelfResult.  # noqa: E501
        :rtype: str
        """
        return self._assessment_name

    @assessment_name.setter
    def assessment_name(self, assessment_name):
        """Sets the assessment_name of this SelfResult.


        :param assessment_name: The assessment_name of this SelfResult.  # noqa: E501
        :type: str
        """

        self._assessment_name = assessment_name

    @property
    def results_url(self):
        """Gets the results_url of this SelfResult.  # noqa: E501


        :return: The results_url of this SelfResult.  # noqa: E501
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this SelfResult.


        :param results_url: The results_url of this SelfResult.  # noqa: E501
        :type: str
        """

        self._results_url = results_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelfResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfResult):
            return True

        return self.to_dict() != other.to_dict()
